<div class="bg-white shadow-none flex flex-1 h-[calc(100vh-128px)]">
    <div class="lg:grid lg:grid-cols-3 min-w-full max-h-min">

        <div class="col-span-2 w-full h-full flex justify-center items center">
            <% if (mediaType === 'image') { %>
                <img class="w-full max-h-[calc(100vh-8rem)] object-contain" src="/stream/image/<%= media.fileId %>" alt="<%= media.title %>">
            <% } else if (mediaType === 'video') { %>
                <video class="w-full max-h-[calc(100vh-8rem)] object-contain" id="mediaPlayer" controls> 
                    <source src="/stream/video/<%= media.fileId %>" type="video/mp4">
                    <% if (media.transcription) { %>
                        <track src="/transcription/subtitles/<%= media.transcription %>" kind="subtitles" srclang="en" label="English">
                    <% } %>
                </video>
            <% } else if (mediaType === 'audio') { %>
                <!-- TODO: Fix subtitles for audio files -->
                <audio class="w-full max-h-[calc(100vh-8rem)] object-contain" id="mediaPlayer" controls>
                    <source src="/stream/audio/<%= media.fileId %>" type="audio/mpeg">
                    <% if (media.transcription) { %>
                        <track src="/transcription/subtitles/<%= media.transcription %>" kind="subtitles" srclang="en" label="English">
                    <% } %>
                </audio>
            <% } %>
        </div>

        <div class="col-span-1 relative pl-4 flex flex-col max-h-[calc(100vh-8rem)]">
            <header class="flex-none">
                <!-- TODO: Add border to top of user when in mobile view -->
                <div class="flex justify-between items-center sm:border-white">
                    <a href="/profile/<%= uploader.userId %>" class="cursor-pointer py-2 flex items-center text-sm outline-none focus:outline-none focus:border-gray-300 transition duration-150 ease-in-out">
                        <img class="h-12 w-12 rounded-full object-cover" src="<%= uploader.profilePhoto || '../icons/defaultUser.svg'%>" alt="user photo" />
                        <p class="block ml-2 font-bold"><%= uploader.username %></p>
                    </a>
                    <p class="text-sm mr-4">
                        <% const date = new Date(media.createdAt) %>
                        <%= date.toLocaleTimeString() %>
                        <%= date.toLocaleDateString() %>
                    </p>
                </div>
                <b class="text-xl"><%= media.title %></b>
                <p class="pb-4 max-h-36 overflow-y-auto"><%= media.description || "(No Description)"%></p>
            </header>

            <!-- Switch between comment section and transcription -->
            <div class="flex font-bold border-grey-400 border-y py-2">
                <button class="flex justify-center w-1/2 bg-violet-blaze rounded-l-lg" id="commentSwitch" onclick="switchScreen('comment')">
                    Comments
                </button>
                <button class="flex justify-center w-1/2 bg-lilac-mist rounded-r-lg" id="transcriptionSwitch" onclick="switchScreen('transcription', '<%= media.transcription %>')">
                    Transcription
                </button>
            </div>

            <!-- Comment section -->
            <div class="flex-grow content-end overflow-y-auto max-h-full" id="commentSection">
                <% media.comments.forEach(comment => { %>
                    <hr>
                    <%- include('./partials/comment.ejs', { comment, uploader }) %>
                <% }) %>
            </div>

            <!-- Transcription section -->
            <div class="flex-grow content-start overflow-y-auto max-h-full hidden" id="transcriptionSection">
                <p class="text-center p-4">No transcription available</p>
            </div>

            <div class="bottom-0 left-0 right-0">
                <hr>

                <div class="flex items-center justify-between mb-2 pt-4 pb-2">
                    <%- include('./partials/voteControls.ejs', { id: media._id, voteCount: media.voteCount, mediaType, favorited: media.favorited, voted: media.voted }) %>
                </div>

                <div class="pb-4">
                    <div class="flex items-center">
                        <textarea class="w-full resize-none outline-none appearance-none rounded-lg p-2 leading-tight focus:outline-1" id="comment" rows="1" placeholder="Say something nice..."></textarea>
                        <button class="focus:outline-none border-none bg-transparent text-blue-600" onclick="postComment(event)">
                            <img src="../icons/arrows/right-arrow.svg" alt="Send">
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>    
    // Switch from comment section to transcription
    async function switchScreen(mode, transcriptionId="") {
        const commentButton = document.getElementById("commentSwitch")
        const transcriptionButton = document.getElementById("transcriptionSwitch")
        const commentSection = document.getElementById("commentSection")
        const transcriptionSection = document.getElementById("transcriptionSection")

        // Cringe class switcher.  
        // I am smart enough to know this is wrong, but not smart enough to know the solution. 
        if (mode === "comment") {
            commentButton.classList.add("bg-violet-blaze")
            commentButton.classList.remove("bg-lilac-mist")
            commentSection.classList.remove("hidden")

            transcriptionButton.classList.add("bg-lilac-mist")
            transcriptionButton.classList.remove("bg-violet-blaze")
            transcriptionSection.classList.add("hidden")
        } else if (mode === "transcription") {
            console.log(transcriptionId)
            await fetchTranscription(transcriptionId)

            commentButton.classList.add("bg-lilac-mist")
            commentButton.classList.remove("bg-violet-blaze")
            commentSection.classList.add("hidden")

            transcriptionButton.classList.add("bg-violet-blaze")
            transcriptionButton.classList.remove("bg-lilac-mist")
            transcriptionSection.classList.remove("hidden")
        }
    }


    async function postComment(event) {
        event.preventDefault();
        
        // Get the routing information from the URL
        const mediaType = window.location.pathname.split("/")[2]
        const params = new URLSearchParams(window.location.search)

        // Create a new comment
        const request = await fetch(`/comment/create/${mediaType}/${params.get("id")}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            credentials: "include",
            body: JSON.stringify({
                content: document.getElementById("comment").value
            })
        })

        const response = await request.json()

        if (response.error) {
            alert(response.error)
            return
        }

        // Clear comment field
        document.getElementById("comment").value = ""

        window.location.reload()
    }

    let transcription = null

    async function fetchTranscription(transcriptionId) {
        // Don't update the DOM in these cases
        if (transcription) return
        if (!transcriptionId) return

        const transcriptionSection = document.getElementById("transcriptionSection")

        // Get the actual transcription, not the subtitles
        const requestTranscription = await fetch(`/transcription/${transcriptionId}`)

        const responseTranscription = await requestTranscription.json()

        // Shorten the variable name
        let transcriptionData = responseTranscription.data.transcription

        // Show a message if the transcription is still processing
        if (transcriptionData.status == "queued") {
            let startedAt = new Date(transcriptionData.createdAt)
            transcriptionSection.innerHTML = `<p class="text-center p-4">Transcription is still processing, please try again later\n
                 Transcription started ${startedAt.toLocaleDateString()}, ${startedAt.toLocaleTimeString()}</p>`
            return
        }
        
        // Get the transcription array
        transcription = transcriptionData.text
        
        // Create a div for the transcription and add each segment of text to it
        const mainDiv = document.createElement("div")
        
        for (let i = 0; i < transcription.length; i++) {
            // Create paragraph segments
            const segment = document.createElement("div")
            
            // Add the timestamps with 'a' tags to seek a specific part of a video
            const timestamp = document.createElement("p")
            timestamp.classList.add("p-2", "pb-0")

            const startTimeInSeconds = parseTimestampToSeconds(transcription[i].from)
                        
            // Create timestamp links
            const startLink = document.createElement("a")
            startLink.href = "#"
            startLink.setAttribute("onclick", `seekPlayer(${startTimeInSeconds})`)
            startLink.appendChild(document.createTextNode(formatTime(startTimeInSeconds)))
            startLink.classList.add("text-blue-600")

            // Add the link to the timestamp
            timestamp.appendChild(startLink)

            const speech = document.createElement("p")
            speech.id = transcriptionId
            speech.classList.add("p-2")
            speech.appendChild(document.createTextNode(transcription[i].text))
            
            // Add all of the containers together
            segment.appendChild(timestamp)
            segment.appendChild(speech)
            // Add an hr if not the last segment 
            if (i < transcription.length - 1) {
                segment.appendChild(document.createElement("hr"))
            }
            mainDiv.appendChild(segment)
        } 

        // Erase the text in the transcription section
        transcriptionSection.innerHTML = ""

        // Add the whole div to the transcription section
        transcriptionSection.appendChild(mainDiv)
    }

    // Allow the user to seek to a specific time in the video using the transcription
    function seekPlayer(seconds) {
        const mediaPlayer = document.getElementById('mediaPlayer');
        if (mediaPlayer) {
            mediaPlayer.currentTime = seconds; // Seek to the desired time
        }
    }

    // parse timestamps in the transcription for seeking in the media player
    function parseTimestampToSeconds(timestamp) {
        const parts = timestamp.split(":").map(parseFloat);
        const seconds = parts.pop(); // Get seconds + milliseconds
        const minutes = parts.pop() || 0; // Get minutes
        const hours = parts.pop() || 0; // Get hours

        // Convert to seconds
        return (hours * 3600) + (minutes * 60) + seconds;
    }

    // Format the time to HH:MM:SS
    function formatTime(seconds) {
        const hrs = Math.floor(seconds / 3600);
        const mins = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);

        return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
</script>