<div class="flex mx-3 flex-row justify-center">
    <div class="lg:w-1/2 m-1">
        <form class="w-full bg-white shadow-md p-6 rounded" id="fileForm" onsubmit="uploadFileForm(event)">
            <div class="flex flex-wrap mx-3">
                <div class="w-full flex flex-col lg:flex-row">
                    <div class="lg:w-1/2  mb-3">
                        <div class="w-full md:w-full px-3 mb-3">
                            <label class="block tracking-wide text-gray-700 text-sm font-bold mb-2" for="title">
                                Title
                                <%- include('../tooltip.ejs', {
                                    message: 'Give your file a clear and descriptive title that helps identify its content.'
                                }) %>
                            </label>
                            
                            <input class="appearance-none block w-full bg-white text-gray-900 font-medium border border-gray-400 rounded-lg py-3 px-3 leading-tight focus:outline-none focus:border-[#98c01d]" type="text" name="title" id="title" placeholder="File name" required />
                        </div>
                        <div class="w-full md:w-full px-3">
                            <label class="block tracking-wide text-gray-700 text-sm font-bold mb-2" for="date">
                                Date
                                <%- include('../tooltip.ejs', {
                                    message: 'This is the date that the file was created,\nnot the date you upload it.'
                                }) %>
                            </label>
                            <input class="appearance-none block w-full bg-white text-gray-900 font-medium border border-gray-400 rounded-lg py-3 px-3 leading-tight focus:outline-none focus:border-[#98c01d]" type="date" name="date" id="date" />
                        </div>
                    </div>   
                    <div class="lg:w-1/2 px-3 pb-3 flex flex-col h-full">
                        <label class="block tracking-wide text-gray-700 text-sm font-bold mb-2" for="description">
                            Description
                            <%- include('../tooltip.ejs', {
                                message: 'Add a detailed description of your file to help others understand its content and purpose.'
                            }) %>
                        </label>
                        <textarea textarea class="appearance-none block w-full bg-white text-gray-900 border border-gray-400 rounded-lg py-3 px-3 leading-tight focus:outline-none focus:border-[#98c01d] flex-grow" type="text" name="description" placeholder="File description" ></textarea>
                    </div>
                </div>                

                <div class="w-full flex flex-col lg:flex-row-reverse">
                    <div class="w-full md:w-full px-3 pb-3">
                        <label class="block tracking-wide text-gray-700 text-sm font-bold mb-2" for="privacy">
                            Privacy
                            <%- include('../tooltip.ejs', {
                                message: '<b class="text-green-800 text-sm">Private</b>: Only you can see the file\n' +
                                         '<b class="text-blue-800 text-sm">Public</b>: Everyone can see the file\n' +
                                         '<b class="text-red-800 text-sm">Unlisted</b>: Only people you allow can see the file (coming soon)'
                            }) %>
                        </label>
                        <select class="appearance-none block w-full bg-white text-gray-900 font-medium border border-gray-400 rounded-lg py-3 px-3 leading-tight focus:outline-none focus:border-[#98c01d]" type="select" name="privacy" id="privacy" required>
                            <option value="Private">Private</option>
                            <option value="Public">Public</option>
                            <option value="Unlisted">Unlisted</option>
                            <option disabled>More options coming soon</option>
                        </select>
                    </div>

                    <div class="w-full px-3 relative">
                        <%- include('./tagSelector.ejs', { query: { tags: [] } }) %>
                    </div>
                </div>
                
                <div class="w-full px-3 mb-3">
                    <label class="cursor-pointer flex w-full flex-col items-center justify-center rounded-xl border-2 border-dashed border-royal-purple bg-white p-6 text-center" for="file">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-green-800" fill="none" viewBox="0 0 24 24" stroke="black" strokeWidth="2">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>

                        <h2 class="mt-4 text-xl font-medium text-gray-700 tracking-wide">File upload</h2>

                        <p class="mt-2 text-gray-500 tracking-wide">Upload or drag & drop your file image, video or audio</p>

                        <input id="file" type="file" class="hidden" name="file0" accept="image/*,video/*,audio/*" onchange="fileChanged(event)" required />
                    </label>
                </div>

                <!-- Preview section -->
                <div class="w-full px-3 mb-3 hidden" id="preview-container">
                    <div class="bg-white rounded-lg shadow-md p-4 relative">
                        <button onclick="clearFile()" class="absolute top-2 right-2 text-red-500 hover:text-red-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                        <h3 class="text-lg font-semibold mb-2">File Preview</h3>
                        <div id="preview-content" class="flex justify-center items-center">
                            <!-- Preview content will be inserted here -->
                        </div>
                    </div>
                </div>

                <!-- Progress bar -->
                <div class="hidden w-full m-3 bg-gray-200 rounded-full dark:bg-gray-700" id="progress-bar">
                    <div class="bg-blue-600 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full" style="width: 0%" id="progress-bar-fill"></div>
                </div>



                <!-- Display the selected file name -->
                <span class="hidden text-green-500 font-bold mb-4 px-3" id="display-file-name"></span>
                
                <div class="w-full md:w-full px-3">
                    <button class="appearance-none block w-full bg-royal-purple transition-all text-gray-100 font-bold border border-gray-200 rounded-lg py-3 px-3 leading-tight hover:bg-violet-blaze focus:outline-none focus:bg-white focus:border-gray-500" >
                        Upload File
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>
<%- include('../modals/error.ejs', { name: 'file' }) %>

<script>
    // Ask the user before the page reloads to avoid losing the selections
    window.addEventListener("beforeunload", function (event) {
        event.preventDefault()
        event.returnValue = "Are you sure you want to leave this page?"
    })

    // <!-- -------------------------- Form and function -------------------------- -->
    function disableForm() {
        const form = document.getElementById('fileForm');
        form.classList.add("disabled-form")
        const elements = form.elements; // Get all form elements
        for (let i = 0; i < elements.length; i++) {
            elements[i].disabled = true;
        }
    }

    function enableForm() {
        const form = document.getElementById('fileForm');
        form.classList.remove("disabled-form");
        const elements = form.elements;
        for (let i = 0; i < elements.length; i++) {
            elements[i].disabled = false;
        }

        // Reset tags
        const displayTags = document.getElementById('display-tags')
        displayTags.innerHTML = ''
        const hiddenTags = document.getElementById('tags')
        hiddenTags.value = ''

        // Remove the display for the file name
        const displayFileName = document.getElementById('display-file-name')
        displayFileName.classList.remove('block')
        displayFileName.classList.add('hidden')

        form.reset(); // Reset form to its initial state
    }

    function clearFile() {
        const fileInput = document.getElementById('file')
        const previewContainer = document.getElementById('preview-container')
        const displayFileName = document.getElementById('display-file-name')
        
        // Clear the file input
        fileInput.value = ''
        
        // Hide the preview container
        previewContainer.classList.add('hidden')
        
        // Hide the file name display
        displayFileName.classList.add('hidden')
        displayFileName.classList.remove('block')
        
        // Clear the preview content
        const previewContent = document.getElementById('preview-content')
        previewContent.innerHTML = ''
    }

    function fileChanged(event) {
        const file = event.target.files[0]
        if (!file) {
            clearFile()
            return
        }

        const fileName = file.name
        const displayFileName = document.getElementById('display-file-name')
        displayFileName.innerHTML = `Selected: ${fileName}`

        displayFileName.classList.toggle('hidden')
        displayFileName.classList.toggle('block')

        // Handle file preview
        const previewContainer = document.getElementById('preview-container')
        const previewContent = document.getElementById('preview-content')
        previewContainer.classList.remove('hidden')
        previewContent.innerHTML = '' // Clear previous preview

        const fileType = file.type.split('/')[0] // Get the main type (image, video, audio)
        const fileURL = URL.createObjectURL(file)

        // Display the preview content based on the file type
        switch(fileType) {
            case 'image':
                const img = document.createElement('img')
                img.src = fileURL
                img.className = 'max-h-64 rounded-lg'
                img.alt = 'Image preview'
                previewContent.appendChild(img)
                break
            case 'video':
                const video = document.createElement('video')
                video.src = fileURL
                video.controls = true
                video.className = 'max-h-64 rounded-lg'
                previewContent.appendChild(video)
                break
            case 'audio':
                const audio = document.createElement('audio')
                audio.src = fileURL
                audio.controls = true
                audio.className = 'w-full'
                previewContent.appendChild(audio)
                break
        }

        // Clean up the URL when the file input changes
        event.target.addEventListener('change', () => {
            URL.revokeObjectURL(fileURL)
        })
    }
    
    async function uploadFileForm(event) {
        event.preventDefault()

        const file = event.target['file'].files[0]
        
        if (!event.target['file'].files[0]) {
            alert('Please select a file')
            return
        }

        const mediaType = file.type.split('/')[0] // Returns video, image, or audio

        const uploadRequest = await fetch('/file/start-chunk-upload', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                metadata: {
                    title: event.target['title'].value,
                    description: event.target['description'].value,
                    date: new Date(event.target['date'].valueAsNumber).setSeconds(1), // Add one second to make sure it is "bigger" then midnight
                    privacy: event.target['privacy'].value,
                    fileName: file.name,
                    tags: event.target['tags'].value,
                    mediaType: mediaType
                }
            })
        })

        const uploadResponse = await uploadRequest.json()

        disableForm()

        if (uploadResponse.success) {
            // Wait half a second to allow the server to process the request
            setTimeout(async () => {
                await uploadFile(file, uploadResponse.data.ext, uploadResponse.data.fileId)
            }, 500)
        } else {
            // alert(uploadResponse.message)
            showModal('file', uploadResponse.errorMessage, uploadResponse.message)
            enableForm()
            return
        }
    }


    const progressBar = document.getElementById('progress-bar')
    const progressBarFill = document.getElementById('progress-bar-fill')


    function updateProgressBar(uploadPercentage) {
        stringUploadPercentage = `${uploadPercentage}%`
        progressBarFill.style.width = stringUploadPercentage

        if (stringUploadPercentage === '100%') {
            // When the upload completes, change the text but not the width
            stringUploadPercentage = 'Complete'
        }

        progressBarFill.textContent = stringUploadPercentage

        if (uploadPercentage === 100) {
            setTimeout(() => {
                alert('File successfully uploaded')
                progressBar.classList.add('hidden')
            }, 0)
        }
    }

    async function uploadFile(file, fileExt, fileId) {
        const CHUNK_SIZE = 4 * 1024 * 1024 // 4MB
        const totalChunks = Math.ceil(file.size / CHUNK_SIZE)

        // Display the progress bar
        progressBar.classList.remove('hidden')

        for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {
            const start = chunkIndex * CHUNK_SIZE
            const end = Math.min(start + CHUNK_SIZE, file.size)
            const chunk = file.slice(start, end)

            const formData = new FormData()
            formData.append('chunk', chunk)
            formData.append('chunkIndex', chunkIndex)
            formData.append('totalChunks', totalChunks)
            formData.append('fileExt', fileExt)
            formData.append('fileId', fileId)

            try {
                const response = await fetch('/file/chunked-upload', {
                    method: 'POST',
                    body: formData
                })

                const result = await response.json()
                console.log(result.message)

                if (result.success) {
                    updateProgressBar(result.data.uploadPercentage)
                } else {
                    throw new Error(result.message)
                }
            } catch (error) {
                console.error('Error uploading chunk:', error)
                // Retry the last failed chunk
                chunkIndex--
            }
        }

        enableForm()
    }

</script>