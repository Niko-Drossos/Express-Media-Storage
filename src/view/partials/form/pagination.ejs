<div class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
  <div class="flex flex-1 justify-between sm:hidden">
    <button onclick="pagination('<%= response.page - 1 %>', '<%= response.page %>', '<%= response.pageCount %>')" class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">Previous</button>
    <button onclick="pagination(parseInt('<%= parseInt(response.page) %>') + 1, '<%= response.page %>', '<%= response.pageCount %>')" class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">Next</button>
  </div>
  <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
    <div>
      <p class="text-sm text-gray-700">
        Showing
        <span class="font-medium"><%= response.documents.start %></span>
        to
        <span class="font-medium"><%= response.documents.end %></span>
        of
        <span class="font-medium"><%= response.documents.count %></span>
        results
      </p>
    </div>
    <div>
      <nav class="isolate inline-flex -space-x-px rounded-md shadow-xs" aria-label="Pagination">
        <button class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-gray-300 ring-inset hover:bg-gray-50 focus:z-20 focus:outline-offset-0" onclick="pagination('<%= response.page - 1 %>', '<%= response.page %>', '<%= response.pageCount %>')">
          <span class="sr-only">Previous</span>
          <svg class="size-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
            <path fill-rule="evenodd" d="M11.78 5.22a.75.75 0 0 1 0 1.06L8.06 10l3.72 3.72a.75.75 0 1 1-1.06 1.06l-4.25-4.25a.75.75 0 0 1 0-1.06l4.25-4.25a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
          </svg>
        </button>
        <!-- Current: "z-10 bg-indigo-600 text-white focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600", Default: "text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-offset-0" -->
        <div id="pagination-container"></div>
        <button onclick="pagination(parseInt('<%= response.page %>') + 1, '<%= response.page %>', '<%= response.pageCount %>')" class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-gray-300 ring-inset hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
          <span class="sr-only">Next</span>
          <svg class="size-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
            <path fill-rule="evenodd" d="M8.22 5.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.75.75 0 0 1-1.06-1.06L11.94 10 8.22 6.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
          </svg>
        </button>
      </nav>
    </div>
  </div>
</div>

<script>
  function pagination(page, currentPage, totalPages) {
      // Prevent string addition
      currentPage = parseInt(currentPage)
      console.log(page, currentPage, totalPages)
      const oldQuery = new URLSearchParams(window.location.search)

      // Prevent going out of bounds
      if (page > totalPages) return
      else if (page < 1) return

      oldQuery.set('page', page)

      // Route to the new location
      const newQuery = oldQuery.toString()
      window.location.search = newQuery
  } 

  // Generate an array of numbers representing the pagination
  function generatePagination(currentPage, totalPages) {
    const maxVisiblePages = 6
    let pagination = []

    if (totalPages <= maxVisiblePages) {
      // If pages are 6 or less, show all numbers
      for (let i = 1; i <= totalPages; i++) {
        pagination.push(i)
      }
    } else {
      // Always include the first page
      pagination.push(1)

      if (currentPage > 3) {
        pagination.push("...") // Ellipsis before middle numbers
      }

      // Determine range of middle numbers
      let start = Math.max(2, currentPage - 1)
      let end = Math.min(totalPages - 1, currentPage + 1)

      for (let i = start; i <= end; i++) {
        pagination.push(i)
      }

      if (currentPage < totalPages - 2) {
        pagination.push("...") // Ellipsis after middle numbers
      }

      // Always include the last page
      pagination.push(totalPages)
    }

    return pagination
  }

  function renderPagination(currentPage, totalPages) {
    const paginationContainer = document.querySelector("#pagination-container")
    console.log(paginationContainer)
    paginationContainer.innerHTML = "" // Clear existing pagination
    const pages = generatePagination(currentPage, totalPages)

    const pageElements = pages.map((page) => {
      let element
      if (page === "...") {
          element = `<span class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-700 ring-1 ring-gray-300 ring-inset">...</span>`
      } else {
          element = `<button onclick="pagination(${page}, ${currentPage}, ${totalPages})" class="relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
              page === currentPage
                  ? "bg-indigo-600 text-white"
                  : "text-gray-900 ring-1 ring-gray-300 ring-inset hover:bg-gray-50"
          }">${page}</button>`
      }

      return element
    })
    console.log(pages)
    paginationContainer.innerHTML = pageElements.join("")
  }

  renderPagination(parseInt('<%= response.page %>'), parseInt('<%= response.pageCount %>'))
</script>
