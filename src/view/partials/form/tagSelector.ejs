<div class="w-full flex flex-col">
    <div class="mb-3 md:mb-0 relative">
        <label class="block tracking-wide text-grey-darker text-xs font-bold mb-2" for="add-tag">
            Tags
            <%- include('../tooltip.ejs', {
                message: '<b class="text-green-800 text-sm">Tags</b> are used to categorize your files and make\nthem easier to search. You can add many tags to a file.'
            }) %>
        </label>
        <input class="appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4 pr-10" id="add-tag" type="text" placeholder="Festival" oninput="fetchTagSuggestions(this.value)" list="tag-datalist">
        <datalist id="tag-datalist"></datalist>
        <img class="absolute right-4 top-9 transform -translate-y-0.5 cursor-pointer size-8" onclick="addTag(event)" src='./icons/plus-symbol.svg' alt="Add tag icon">
    </div>
    <div class="w-full px-3 mb-3 md:mb-0 flex items-center flex-wrap h-auto flex-row mt-2" id="display-tags"></div>

    <input id="tags" name="tags" value="<%= query.tags %>" type="hidden"/>
</div>

<script>
    // Display media tags from query
    const displayTags = document.getElementById('display-tags')
    const hiddenTags = document.getElementById('tags')
    const queryTags = "<%= query.tags %>"
    const tagArray = queryTags === "" ? [] : queryTags.split(',')

    if (queryTags) {   
        tagArray.forEach(tag => displayTags.innerHTML += tagPill(tag))
    }

    function addTag(event) {
        const inputTag = document.getElementById('add-tag')
        const tag = inputTag.value

        if (tag === '') {
            alert("You can't search for an empty tag\nPlease add another tag before searching")
        } else if (tag.length > 25) {
            alert("Tags cannot be longer than 25 characters\nPlease add a shorter tag before searching")
        } else if (tagArray.includes(tag)) {
            alert("You can't search for the same tag twice\nPlease add a different tag before searching")
        } else {
            displayTags.innerHTML += tagPill(tag)
            tagArray.push(tag)
            hiddenTags.value = tagArray.join(',')
            inputTag.value = ''
        }
    }

    function removeTag(tagName) {
        // Find the location of a tag in the array
        const index = tagArray.indexOf(tagName)
        tagArray.splice(index, 1)
        hiddenTags.value = tagArray.join(',')
        displayTags.innerHTML = tagArray.map(tag => tagPill(tag)).join('')
    }

    function tagPill(tagName) {
        return `
            <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">
                ${tagName} 
                <span class="text-red-500 cursor-pointer" onclick="removeTag('${tagName}')">X</span>
            </span>`
    }

    <!-- ---------- Search for tags and suggest them to the user ---------- -->

    const tagQueryCache = {}
    
    //Update the datalist with suggestions
    const updateTagDatalist = (suggestions) => {
        const datalist = document.getElementById('tag-datalist')
        datalist.innerHTML = ''
        suggestions.forEach((suggestion) => {
            const option = document.createElement('option')
            option.value = suggestion
            datalist.appendChild(option)
        })
    }

    let tagSearchTimeout = null

    const fetchTagSuggestions = async (query) => {
        // Don't make a request if the query is empty
        if (query === '') {
            updateTagDatalist([])
            return
        }

        clearTimeout(tagSearchTimeout)
        // Give the user some time to type before making the request
        tagSearchTimeout = setTimeout(async () => {
            if (tagQueryCache[query]) {
                updateTagDatalist(tagQueryCache[query]) // Use cached results
                return
            }

            // Search only for the tags in the respective collection.
            // The slice method removes the "s" at the end of the mediaType
            const mediaType = document.getElementById("mediaType").value.slice(0, -1)

            const request = await fetch(`/suggest/${mediaType}/tags?query=${encodeURIComponent(query)}`)
            const response = await request.json()
            const suggestions = response.data.suggestions
            tagQueryCache[query] = suggestions // Cache the result
            updateTagDatalist(suggestions)
        }, 500)
    }
</script>